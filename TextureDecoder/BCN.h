#pragma once
#include "pch.h"
#include "FP16.h"
#include <cstring>
#include <algorithm>

namespace SoarCraft::QYun::TextureDecoder {
    struct BitReader {
        BitReader(const uint8_t* _data, uint16_t _bitPos = 0) : m_data(_data), m_bitPos(_bitPos) {
        }

        uint16_t read(uint8_t _numBits) {
            const uint16_t pos = m_bitPos / 8;
            const uint16_t shift = m_bitPos & 7;
            uint32_t data = 0;
            memcpy(&data, &m_data[pos], std::min(4, 16 - pos));
            m_bitPos += _numBits;
            return uint16_t((data >> shift) & ((1 << _numBits) - 1));
        }

        uint16_t peek(uint16_t _offset, uint8_t _numBits) {
            const uint16_t bitPos = m_bitPos + _offset;
            const uint16_t shift = bitPos & 7;
            uint16_t pos = bitPos / 8;
            uint32_t data = 0;
            memcpy(&data, &m_data[pos], std::min(4, 16 - pos));
            return uint8_t((data >> shift) & ((1 << _numBits) - 1));
        }

        const uint8_t* m_data;
        uint16_t m_bitPos;
    };

    struct Bc6hModeInfo {
        uint8_t transformed;
        uint8_t partitionBits;
        uint8_t endpointBits;
        uint8_t deltaBits[3];
    };

    inline uint8_t f32_to_u8(const float f) {
        float c = roundf(f * 255);
        if (c < 0)
            return 0;
        else if (c > 255)
            return 255;
        else
            return c;
    }

    inline uint8_t half_to_u8(uint16_t h) {
        return f32_to_u8(fp16_ieee_to_fp32_value(h));
    }

    inline uint16_t sign_extend(uint16_t _value, uint8_t _numBits) {
        const uint16_t mask = 1 << (_numBits - 1);
        const uint16_t result = (_value ^ mask) - mask;

        return result;
    }

    inline uint16_t unquantize(uint16_t _value, bool _signed, uint8_t _endpointBits) {
        const uint16_t maxValue = 1 << (_endpointBits - 1);

        if (_signed) {
            if (_endpointBits >= 16)
                return _value;

            const bool sign = !!(_value & 0x8000);
            _value &= 0x7fff;

            uint16_t unq;

            if (0 == _value)
                unq = 0;
            else if (_value >= maxValue - 1)
                unq = 0x7fff;
            else unq = ((_value << 15) + 0x4000) >> (_endpointBits - 1);

            return sign ? -unq : unq;
        }

        if (_endpointBits >= 15)
            return _value;

        if (0 == _value)
            return 0;

        if (_value == maxValue)
            return UINT16_MAX;

        return ((_value << 15) + 0x4000) >> (_endpointBits - 1);
    }

    inline uint16_t finish_unquantize(uint16_t _value, bool _signed) {
        if (_signed) {
            const uint16_t sign = _value & 0x8000;
            _value &= 0x7fff;

            return ((_value * 31) >> 5) | sign;
        }

        return (_value * 31) >> 6;
    }

    const uint8_t s_bptcFactors[3][16] = {
    {  0, 21, 43, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 },
    {  0,  9, 18, 27, 37, 46, 55, 64,  0,  0,  0,  0,  0,  0,  0,  0 },
    {  0,  4,  9, 13, 17, 21, 26, 30, 34, 38, 43, 47, 51, 55, 60, 64 },
    };

    const Bc6hModeInfo s_bc6hModeInfo[] =
    { //  +--------------------------- transformed
      //  |  +------------------------ partition bits
      //  |  |  +--------------------- endpoint bits
      //  |  |  |      +-------------- delta bits
        { 1, 5, 10, {  5,  5,  5 } }, // 00    2-bits
        { 1, 5,  7, {  6,  6,  6 } }, // 01
        { 1, 5, 11, {  5,  4,  4 } }, // 00010 5-bits
        { 0, 0, 10, { 10, 10, 10 } }, // 00011
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 1, 5, 11, {  4,  5,  4 } }, // 00110
        { 1, 0, 11, {  9,  9,  9 } }, // 00010
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 1, 5, 11, {  4,  4,  5 } }, // 00010
        { 1, 0, 12, {  8,  8,  8 } }, // 00010
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 1, 5,  9, {  5,  5,  5 } }, // 00010
        { 1, 0, 16, {  4,  4,  4 } }, // 00010
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 1, 5,  8, {  6,  5,  5 } }, // 00010
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 1, 5,  8, {  5,  6,  5 } }, // 00010
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 1, 5,  8, {  5,  5,  6 } }, // 00010
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 0,  0, {  0,  0,  0 } }, // -
        { 0, 5,  6, {  6,  6,  6 } }, // 00010
        { 0, 0,  0, {  0,  0,  0 } }, // -
    };

    const uint16_t s_bptcP2[] =
    { //  3210     0000000000   1111111111   2222222222   3333333333
        0xcccc, // 0, 0, 1, 1,  0, 0, 1, 1,  0, 0, 1, 1,  0, 0, 1, 1
        0x8888, // 0, 0, 0, 1,  0, 0, 0, 1,  0, 0, 0, 1,  0, 0, 0, 1
        0xeeee, // 0, 1, 1, 1,  0, 1, 1, 1,  0, 1, 1, 1,  0, 1, 1, 1
        0xecc8, // 0, 0, 0, 1,  0, 0, 1, 1,  0, 0, 1, 1,  0, 1, 1, 1
        0xc880, // 0, 0, 0, 0,  0, 0, 0, 1,  0, 0, 0, 1,  0, 0, 1, 1
        0xfeec, // 0, 0, 1, 1,  0, 1, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1
        0xfec8, // 0, 0, 0, 1,  0, 0, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1
        0xec80, // 0, 0, 0, 0,  0, 0, 0, 1,  0, 0, 1, 1,  0, 1, 1, 1
        0xc800, // 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1,  0, 0, 1, 1
        0xffec, // 0, 0, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1
        0xfe80, // 0, 0, 0, 0,  0, 0, 0, 1,  0, 1, 1, 1,  1, 1, 1, 1
        0xe800, // 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1,  0, 1, 1, 1
        0xffe8, // 0, 0, 0, 1,  0, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1
        0xff00, // 0, 0, 0, 0,  0, 0, 0, 0,  1, 1, 1, 1,  1, 1, 1, 1
        0xfff0, // 0, 0, 0, 0,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1
        0xf000, // 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  1, 1, 1, 1
        0xf710, // 0, 0, 0, 0,  1, 0, 0, 0,  1, 1, 1, 0,  1, 1, 1, 1
        0x008e, // 0, 1, 1, 1,  0, 0, 0, 1,  0, 0, 0, 0,  0, 0, 0, 0
        0x7100, // 0, 0, 0, 0,  0, 0, 0, 0,  1, 0, 0, 0,  1, 1, 1, 0
        0x08ce, // 0, 1, 1, 1,  0, 0, 1, 1,  0, 0, 0, 1,  0, 0, 0, 0
        0x008c, // 0, 0, 1, 1,  0, 0, 0, 1,  0, 0, 0, 0,  0, 0, 0, 0
        0x7310, // 0, 0, 0, 0,  1, 0, 0, 0,  1, 1, 0, 0,  1, 1, 1, 0
        0x3100, // 0, 0, 0, 0,  0, 0, 0, 0,  1, 0, 0, 0,  1, 1, 0, 0
        0x8cce, // 0, 1, 1, 1,  0, 0, 1, 1,  0, 0, 1, 1,  0, 0, 0, 1
        0x088c, // 0, 0, 1, 1,  0, 0, 0, 1,  0, 0, 0, 1,  0, 0, 0, 0
        0x3110, // 0, 0, 0, 0,  1, 0, 0, 0,  1, 0, 0, 0,  1, 1, 0, 0
        0x6666, // 0, 1, 1, 0,  0, 1, 1, 0,  0, 1, 1, 0,  0, 1, 1, 0
        0x366c, // 0, 0, 1, 1,  0, 1, 1, 0,  0, 1, 1, 0,  1, 1, 0, 0
        0x17e8, // 0, 0, 0, 1,  0, 1, 1, 1,  1, 1, 1, 0,  1, 0, 0, 0
        0x0ff0, // 0, 0, 0, 0,  1, 1, 1, 1,  1, 1, 1, 1,  0, 0, 0, 0
        0x718e, // 0, 1, 1, 1,  0, 0, 0, 1,  1, 0, 0, 0,  1, 1, 1, 0
        0x399c, // 0, 0, 1, 1,  1, 0, 0, 1,  1, 0, 0, 1,  1, 1, 0, 0
        0xaaaa, // 0, 1, 0, 1,  0, 1, 0, 1,  0, 1, 0, 1,  0, 1, 0, 1
        0xf0f0, // 0, 0, 0, 0,  1, 1, 1, 1,  0, 0, 0, 0,  1, 1, 1, 1
        0x5a5a, // 0, 1, 0, 1,  1, 0, 1, 0,  0, 1, 0, 1,  1, 0, 1, 0
        0x33cc, // 0, 0, 1, 1,  0, 0, 1, 1,  1, 1, 0, 0,  1, 1, 0, 0
        0x3c3c, // 0, 0, 1, 1,  1, 1, 0, 0,  0, 0, 1, 1,  1, 1, 0, 0
        0x55aa, // 0, 1, 0, 1,  0, 1, 0, 1,  1, 0, 1, 0,  1, 0, 1, 0
        0x9696, // 0, 1, 1, 0,  1, 0, 0, 1,  0, 1, 1, 0,  1, 0, 0, 1
        0xa55a, // 0, 1, 0, 1,  1, 0, 1, 0,  1, 0, 1, 0,  0, 1, 0, 1
        0x73ce, // 0, 1, 1, 1,  0, 0, 1, 1,  1, 1, 0, 0,  1, 1, 1, 0
        0x13c8, // 0, 0, 0, 1,  0, 0, 1, 1,  1, 1, 0, 0,  1, 0, 0, 0
        0x324c, // 0, 0, 1, 1,  0, 0, 1, 0,  0, 1, 0, 0,  1, 1, 0, 0
        0x3bdc, // 0, 0, 1, 1,  1, 0, 1, 1,  1, 1, 0, 1,  1, 1, 0, 0
        0x6996, // 0, 1, 1, 0,  1, 0, 0, 1,  1, 0, 0, 1,  0, 1, 1, 0
        0xc33c, // 0, 0, 1, 1,  1, 1, 0, 0,  1, 1, 0, 0,  0, 0, 1, 1
        0x9966, // 0, 1, 1, 0,  0, 1, 1, 0,  1, 0, 0, 1,  1, 0, 0, 1
        0x0660, // 0, 0, 0, 0,  0, 1, 1, 0,  0, 1, 1, 0,  0, 0, 0, 0
        0x0272, // 0, 1, 0, 0,  1, 1, 1, 0,  0, 1, 0, 0,  0, 0, 0, 0
        0x04e4, // 0, 0, 1, 0,  0, 1, 1, 1,  0, 0, 1, 0,  0, 0, 0, 0
        0x4e40, // 0, 0, 0, 0,  0, 0, 1, 0,  0, 1, 1, 1,  0, 0, 1, 0
        0x2720, // 0, 0, 0, 0,  0, 1, 0, 0,  1, 1, 1, 0,  0, 1, 0, 0
        0xc936, // 0, 1, 1, 0,  1, 1, 0, 0,  1, 0, 0, 1,  0, 0, 1, 1
        0x936c, // 0, 0, 1, 1,  0, 1, 1, 0,  1, 1, 0, 0,  1, 0, 0, 1
        0x39c6, // 0, 1, 1, 0,  0, 0, 1, 1,  1, 0, 0, 1,  1, 1, 0, 0
        0x639c, // 0, 0, 1, 1,  1, 0, 0, 1,  1, 1, 0, 0,  0, 1, 1, 0
        0x9336, // 0, 1, 1, 0,  1, 1, 0, 0,  1, 1, 0, 0,  1, 0, 0, 1
        0x9cc6, // 0, 1, 1, 0,  0, 0, 1, 1,  0, 0, 1, 1,  1, 0, 0, 1
        0x817e, // 0, 1, 1, 1,  1, 1, 1, 0,  1, 0, 0, 0,  0, 0, 0, 1
        0xe718, // 0, 0, 0, 1,  1, 0, 0, 0,  1, 1, 1, 0,  0, 1, 1, 1
        0xccf0, // 0, 0, 0, 0,  1, 1, 1, 1,  0, 0, 1, 1,  0, 0, 1, 1
        0x0fcc, // 0, 0, 1, 1,  0, 0, 1, 1,  1, 1, 1, 1,  0, 0, 0, 0
        0x7744, // 0, 0, 1, 0,  0, 0, 1, 0,  1, 1, 1, 0,  1, 1, 1, 0
        0xee22, // 0, 1, 0, 0,  0, 1, 0, 0,  0, 1, 1, 1,  0, 1, 1, 1
    };

    const uint8_t s_bptcA2[] =
    {
        15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15,
        15,  2,  8,  2,  2,  8,  8, 15,
         2,  8,  2,  2,  8,  8,  2,  2,
        15, 15,  6,  8,  2,  8, 15, 15,
         2,  8,  2,  2,  2, 15, 15,  6,
         6,  2,  6,  8, 15, 15,  2,  2,
        15, 15, 15, 15, 15,  2,  2, 15,
    };
}
